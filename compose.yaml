version: '3.8'

services:
  # Auth Service và các dependencies
  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "8800:8800"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
    networks:
      - api-gateway-network    # Thêm network mới
    healthcheck:              # Thêm healthcheck cho auth service
      test: ["CMD", "curl", "-f", "http://localhost:8800/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  ocr_gemini_service:
    build:
      context: ./ocr_gemini_service
      dockerfile: Dockerfile
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    env_file:
      - ./ocr_gemini_service/.env
    volumes:
      # Mount the app directory for live reloading during development
      - ./ocr_gemini_service/app:/app/app
    container_name: ocr_gemini_service

  ocr_grok_vision_service:
    build:
      context: ./ocr_grok_vision_service
      dockerfile: Dockerfile
    ports:
      - "8001:8000" # Map host port 8001 to container port 8000
    env_file:
      - ./ocr_grok_vision_service/.env
    volumes:
      # Mount the app directory for live reloading during development
      - ./ocr_grok_vision_service/app:/app/app
    container_name: ocr_grok_vision_service

  redis:
    image: redis:6
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 300mb
        reservations:
          memory: 100mb
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # Kong Gateway và các dependencies
  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: unless-stopped
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kong-net

  kong:
    image: kong:latest
    container_name: kong
    restart: unless-stopped
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "7000:8000"    # Proxy listener
      - "7443:8443"    # Proxy SSL listener
      - "7001:8001"    # Admin API
      - "7444:8444"    # Admin API SSL
    command: |
      sh -c "kong migrations bootstrap && kong start"
    networks:
      - kong-net
      - api-gateway-network    # Thêm network mới
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: unless-stopped
    depends_on:
      - kong
    environment:
      - NODE_ENV=production
      - TOKEN_SECRET=supersecret
      - KONGA_BACKEND_URL=http://kong:8001
    ports:
      - "7337:1337"
    networks:
      - kong-net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring-net
      - kong-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - monitoring-net
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    volumes:
      - uptime-kuma-data:/app/data
    ports:
      - "3001:3001"  # Port mặc định của Uptime Kuma
    networks:
      - monitoring-net
#    healthcheck:
#      test: ["CMD", "wget", "--spider", "http://localhost:3001"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
