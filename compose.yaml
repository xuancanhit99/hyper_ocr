version: '3.8'

services:
#  # Auth Service and dependencies
#  auth-service:
#    build:
#      context: ./auth_service
#      dockerfile: Dockerfile
#    container_name: auth-service
#    restart: unless-stopped
#    ports:
#      - "8800:8800"
#    env_file:
#      - ./auth_service/.env.example # Assuming .env.example holds defaults, adjust if .env is required
#    depends_on:
#      redis:
#        condition: service_healthy # Depend on redis being healthy
#    networks:
#      - api-gateway-network
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8800/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 40s
#    deploy:
#      resources:
#        limits:
#          memory: 512M
#          cpus: '0.5'
#        reservations:
#          memory: 256M
#          cpus: '0.25'

  redis:
    image: redis:6
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 300mb
        reservations:
          memory: 100mb
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks: # Assign to the network used by auth-service
      - api-gateway-network

  # OCR Services
  ocr_gemini_service:
    build:
      context: ./ocr_gemini_service
      dockerfile: Dockerfile
    container_name: ocr_gemini_service
    restart: unless-stopped
    ports:
      - "6161:6161" # Mapped to internal service port
    env_file:
      - ./ocr_gemini_service/.env
    volumes:
      - ./ocr_gemini_service/app:/app/app
    networks:
      - hyper_ocr_network
    healthcheck: # Added healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:6161/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ocr_grok_vision_service:
    build:
      context: ./ocr_grok_vision_service
      dockerfile: Dockerfile
    container_name: ocr_grok_vision_service
    restart: unless-stopped
    ports:
      - "6262:6262" # Mapped to internal service port
    env_file:
      - ./ocr_grok_vision_service/.env
    volumes:
      - ./ocr_grok_vision_service/app:/app/app
    networks:
      - hyper_ocr_network
    healthcheck: # Added healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:6262/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

#  ocr_cloud_vision_service: # Added Service
#    build:
#      context: ./ocr_cloud_vision_service
#      dockerfile: Dockerfile
#    container_name: ocr_cloud_vision_service
#    restart: unless-stopped
#    ports:
#      - "8002:8000" # Assign new port
#    env_file:
#      - ./ocr_cloud_vision_service/.env.example # Assuming .env.example
#    volumes:
#      - ./ocr_cloud_vision_service/app:/app/app # Assuming similar structure
#    networks:
#      - hyper_ocr_network
#    # Add healthcheck if available in the service

#  ocr_pytesseract_service: # Added Service
#    build:
#      context: ./ocr_pytesseract_service
#      dockerfile: Dockerfile
#    container_name: ocr_pytesseract_service
#    restart: unless-stopped
#    ports:
#      - "8003:8000" # Assign new port
#    env_file:
#      - ./ocr_pytesseract_service/.env.example # Assuming .env.example
#    volumes:
#      - ./ocr_pytesseract_service/app:/app/app # Assuming similar structure
#    networks:
#      - hyper_ocr_network
#    # Add healthcheck if available in the service

#  # Other AI/Utility Services
#  gigachat_service:
#    build:
#      context: ./gigachat_service
#      dockerfile: Dockerfile
#    container_name: gigachat_service
#    restart: unless-stopped
#    ports:
#      # Use the port defined in gigachat_service/.env (defaults to 8005 if not set)
#      - "${GIGACHAT_SERVICE_PORT:-8005}:${APP_PORT:-8005}"
#    env_file:
#      - ./gigachat_service/.env.example # Assuming .env.example
#    volumes:
#      - ./gigachat_service:/app # Mounts the whole directory
#    networks:
#      - hyper_ocr_network
#    # Add healthcheck if available in the service

#  split_bill_service: # Added Service
#    build:
#      context: ./split_bill_service
#      dockerfile: Dockerfile
#    container_name: split_bill_service
#    restart: unless-stopped
#    ports:
#      - "8004:8000" # Assign new port
#    env_file:
#      - ./split_bill_service/.env.example # Assuming .env.example
#    volumes:
#      - ./split_bill_service/app:/app/app # Assuming similar structure
#    networks:
#      - hyper_ocr_network
#    # Add healthcheck if available in the service

  # Kong API Gateway and dependencies
  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: unless-stopped
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong # Consider using secrets for production
    volumes:
      - kong-data:/var/lib/postgresql/data
    ports:
      - "5435:5432" # Expose only if needed externally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kong-net

  kong:
    image: kong:latest
    container_name: kong
    restart: unless-stopped
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong # Consider using secrets
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      # KONG_PLUGINS: bundled, example-plugin # Add custom plugins if needed
    ports:
      - "7000:8000"    # Proxy listener HTTP
      - "7443:8443"    # Proxy listener HTTPS
      - "7001:8001"    # Admin API HTTP
      - "7444:8444"    # Admin API HTTPS
    command: |
      sh -c "kong migrations bootstrap && kong start"
    networks:
      - kong-net
      - api-gateway-network # Network for auth service
      - hyper_ocr_network   # Network for OCR/AI services
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck: # Added healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8001/status"] # Check Kong Admin API status
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: unless-stopped
    depends_on:
      - kong
    environment:
      NODE_ENV: production
      TOKEN_SECRET: supersecret # CHANGE THIS IN PRODUCTION
      KONGA_BACKEND_URL: http://kong:8001 # Internal communication via kong service name
    ports:
      - "7337:1337"
    networks:
      - kong-net
    healthcheck: # Added healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:1337"] # Check Konga UI
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring Stack
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus # Persist Prometheus data
    ports:
      - "9090:9090"
    networks:
      - monitoring-net
      - kong-net # To scrape Kong metrics if configured
      - api-gateway-network # To scrape other services if needed
      - hyper_ocr_network   # To scrape other services if needed
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck: # Added healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:9090"] # Check Prometheus UI
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


networks:
  api-gateway-network:
    driver: bridge
  hyper_ocr_network:
    driver: bridge
  kong-net:
    driver: bridge
  monitoring-net:
    driver: bridge

volumes:
  redis_data:
  kong-data:
  prometheus_data:
