# app/api/routes/chat.py
from fastapi import APIRouter, Depends, HTTPException, status, Query, Header
from typing import Annotated
from app.models.schemas import ChatRequest, ChatResponse, ErrorDetail # Use ErrorDetail for Grok
from app.services.ocr_service import OCRService # Reuse OCRService which now has chat method
from app.core.config import get_settings

router = APIRouter()
settings = get_settings()

# Dependency function specifically for the chat service (using text model by default)
# Note: We reuse OCRService, but the dependency configures it for chat implicitly
# by not overriding the model name unless specified in the query.
# The OCRService __init__ doesn't select a model, the methods do.
def get_chat_configured_service(
    x_api_key: str | None = Header(None, alias="X-API-Key")
    # model_name query parameter will be handled directly in the route if needed,
    # or passed to the service method. Let's pass it to the method.
) -> OCRService:
    """Dependency to get OCRService instance, ready for chat or OCR."""
    try:
        # The service itself determines the model in the method call based on defaults or overrides
        return OCRService() # API key check happens here
    except ValueError as e: # Catches API key configuration error from __init__
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Grok Service initialization failed: {e}"
        )

@router.post(
    "/", # Endpoint will be /chat/
    response_model=ChatResponse,
    summary="Generate Text Response using Grok",
    responses={
        status.HTTP_400_BAD_REQUEST: {"model": ErrorDetail},
        status.HTTP_429_TOO_MANY_REQUESTS: {"model": ErrorDetail},
        status.HTTP_500_INTERNAL_SERVER_ERROR: {"model": ErrorDetail},
        status.HTTP_502_BAD_GATEWAY: {"model": ErrorDetail},
        status.HTTP_503_SERVICE_UNAVAILABLE: {"model": ErrorDetail},
        status.HTTP_504_GATEWAY_TIMEOUT: {"model": ErrorDetail},
    }
)
async def generate_grok_chat_response(
    request_body: ChatRequest,
    service: Annotated[OCRService, Depends(get_chat_configured_service)],
    # Model name should come from the request body, not query parameter
    # model_name: str | None = Query(None, description=f"Optional: Specify Grok text model (default: {settings.GROK_TEXT_DEFAULT_MODEL})"),
    # API key can also be passed via header, handled by dependency
    x_api_key: str | None = Header(None, alias="X-API-Key")
):
    """
    Receives a user message and optional chat history, then returns
    a text response generated by the configured Grok model.
    """
    try:
        # Pass the model_name override and api_key from the request to the service method
        response_text, model_used = await service.generate_text_response(
            message=request_body.message,
            history=request_body.history,
            model_name=request_body.model_name, # Pass model_name from the request body
            api_key=x_api_key # Pass header override
        )
        return ChatResponse(
            response_text=response_text,
            model_used=model_used
        )
    except HTTPException as http_exc:
        # Re-raise HTTPExceptions raised by the service
        raise http_exc
    except Exception as e:
        # Catch any other unexpected errors
        # Log the error e here
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred during Grok chat generation: {e}"
        )