# app/api/routes/chat.py
from fastapi import APIRouter, Depends, HTTPException, status, Query, Header
from typing import Annotated
from app.models.schemas import ChatRequest, ChatResponse, ErrorResponse
from app.services.gemini import GeminiService
from app.core.config import get_settings

router = APIRouter()
settings = get_settings()

# Dependency function specifically for the chat service (using text model by default)
def get_chat_service(
    x_api_key: str | None = Header(None, alias="X-API-Key"),
    # Remove model_name from dependency parameters
) -> GeminiService:
    """Dependency to get GeminiService configured for text chat."""
    try:
        # If model_name is provided via query, use it, otherwise service uses default text model
        # Initialize service with default text model; specific model override handled in route/service method
        return GeminiService(api_key=x_api_key, model_name=None) # Pass None, service __init__ uses default
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Gemini Service initialization failed: {e}"
        )

@router.post(
    "/", # Endpoint will be /chat/
    response_model=ChatResponse,
    summary="Generate Text Response using Gemini",
    responses={
        status.HTTP_400_BAD_REQUEST: {"model": ErrorResponse},
        status.HTTP_500_INTERNAL_SERVER_ERROR: {"model": ErrorResponse},
        status.HTTP_503_SERVICE_UNAVAILABLE: {"model": ErrorResponse},
    }
)
async def generate_chat_response(
    request_body: ChatRequest,
    service: Annotated[GeminiService, Depends(get_chat_service)]
):
    """
    Receives a user message and optional chat history, then returns
    a text response generated by the configured Gemini model.
    """
    try:
        # Pass model_name from request body to the service method
        response_text, model_used = await service.generate_text_response(
            message=request_body.message,
            history=request_body.history,
            model_name_override=request_body.model_name # Pass the override
        )
        return ChatResponse(
            response_text=response_text,
            model_used=model_used # Use the model name returned by the service method
        )
    except HTTPException as http_exc:
        # Re-raise HTTPExceptions raised by the service (e.g., blocked content, init failure)
        raise http_exc
    except Exception as e:
        # Catch any other unexpected errors during chat generation
        # Log the error e here
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred during chat generation: {e}"
        )